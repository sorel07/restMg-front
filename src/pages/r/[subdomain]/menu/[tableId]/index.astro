---
import CartModal from "../../../../../components/CartModal.astro";
import MenuItemCard from "../../../../../components/MenuItemCard.astro";
import Layout from "../../../../../layouts/Layout.astro";
import {
  getMenuBySubdomain,
  getTables,
} from "../../../../../services/api";
import type { MenuBySubdomainResponse, MenuCategory } from "../../../../../types/menu";

// Astro nos da los parámetros de la ruta directamente
const { subdomain, tableId } = Astro.params;

let menuCategories: MenuCategory[] = [];
let restaurantId: string | null = null;
let error: string | null = null;
let tableCode: string = "";
let brandingColor: string = "#FF5733"; // Color por defecto, ya que no podemos obtenerlo de la API por ahora

if (!subdomain) {
  error = "Restaurante no encontrado. La URL es incorrecta.";
} else {
  try {
    const menuResponse = await getMenuBySubdomain(subdomain);
    if (menuResponse && menuResponse.restaurantId) {
      restaurantId = menuResponse.restaurantId;
      menuCategories = menuResponse.categories || [];
      const tables = await getTables();
      const foundTable = tables.find((t) => t.id === tableId);
      tableCode = foundTable ? foundTable.code : "";
    } else {
      throw new Error(
        `Respuesta inválida del menú para el subdominio: ${subdomain}`
      );
    }
  } catch (e) {
    console.error("[SSR Menu Page] CATCH BLOCK: Error getting data:", e);
    error = "No se pudo cargar el menú para este restaurante.";
  }
}

const menuData = {
  restaurantId: restaurantId,
  tableId,
  tableCode,
  items:
    menuCategories.flatMap(
      (cat) =>
        cat.items
          ?.filter((item) => item.isAvailable)
          .map((item) => ({ menuItemId: item.id, quantity: 1 })) || []
    ) || [],
};

// Clases de Tailwind para las pestañas
const tabBaseClasses = "px-4 py-3 font-semibold text-center whitespace-nowrap transition-colors duration-200 ease-in-out focus:outline-none";
const tabInactiveClasses = "text-zinc-400 hover:text-white border-b-2 border-transparent";
const tabActiveClasses = `text-[var(--branding-color)] border-b-2 border-[var(--branding-color)]`;
---

<style define:vars={{ brandingColor }}>
  :root {
    --branding-color: var(--brandingColor);
  }
</style>

<Layout title={"Menú del Restaurante"}>
  <div data-menu-info={JSON.stringify(menuData)} class="hidden"></div>

  <main class="container mx-auto pb-24">
    <header class="text-center my-8 px-4">
      <h1 class="font-heading text-4xl sm:text-5xl font-bold text-[var(--branding-color)]">
        Nuestro Menú
      </h1>
    </header>

    {
      menuCategories.length > 0 ? (
        <div id="menu-container">
          <!-- Barra de Pestañas Adhesiva -->
          <div class="sticky top-0 z-10 bg-zinc-900/80 backdrop-blur-lg shadow-md">
            <div class="flex overflow-x-auto no-scrollbar border-b border-zinc-700" role="tablist">
              {menuCategories.map((category, index) => (
                <button
                  role="tab"
                  class={`${tabBaseClasses} ${index === 0 ? tabActiveClasses : tabInactiveClasses}`}
                  data-tab-target={`#panel-${category.id}`}
                >
                  {category.name}
                </button>
              ))}
            </div>
          </div>

          <!-- Paneles de Contenido -->
          <div class="p-4 sm:p-6 md:p-8">
            {menuCategories.map((category, index) => (
              <div
                id={`panel-${category.id}`}
                class={`tab-panel ${index !== 0 ? 'hidden' : ''}`}
                role="tabpanel"
              >
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
                  {category.items
                    .filter((item) => item.isAvailable)
                    .map((item) => (
                      <div data-menu-item={JSON.stringify(item)}>
                        <MenuItemCard
                          imageUrl={item.imageUrl || "/placeholder-image.jpg"}
                          name={item.name}
                          description={item.description || "Sin descripción disponible"}
                          price={item.price}
                          showAddButton={true}
                          menuItemId={item.id}
                          brandingColor={brandingColor}
                        />
                      </div>
                    ))}
                </div>
              </div>
            ))}
          </div>
        </div>
      ) : error ? (
        <div class="text-center text-red-400 py-20">
          <p class="text-xl mb-2">{error}</p>
        </div>
      ) : (
        <div class="text-center text-zinc-500 py-20">
          <p class="text-xl mb-2">No hay platos disponibles</p>
        </div>
      )
    }
  </main>

  <CartModal />
  <script src="../../../../../scripts/cart-manager.ts"></script>

  <script define:vars={{ tabActiveClasses, tabInactiveClasses }}>
    document.addEventListener('DOMContentLoaded', () => {
      const tabs = document.querySelectorAll('[role="tab"][data-tab-target]');
      
      tabs.forEach(tab => {
        tab.addEventListener('click', () => {
          // Ocultar todos los paneles
          document.querySelectorAll('.tab-panel').forEach(p => p.classList.add('hidden'));
          
          // Resetear todas las pestañas a su estado inactivo
          tabs.forEach(t => {
            t.className = t.className.replace(tabActiveClasses, tabInactiveClasses);
          });

          // Activar la pestaña y panel clickeados
          tab.className = tab.className.replace(tabInactiveClasses, tabActiveClasses);
          const targetPanel = document.querySelector(tab.dataset.tabTarget);
          if (targetPanel) {
            targetPanel.classList.remove('hidden');
          }
        });
      });
    });
  </script>
</Layout>