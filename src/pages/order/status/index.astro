---
import Layout from '../../../layouts/Layout.astro';
import { getOrderByCode } from '../../../services/api';

 
// Obtener par√°metros de la URL
const url = new URL(Astro.request.url);
const orderCode = url.searchParams.get('code');
const restaurantId = url.searchParams.get('restaurantId');

let order = null;
let error = null;

// Validar par√°metros requeridos
if (!orderCode || !restaurantId) {
  error = 'Par√°metros de pedido faltantes';
} else {
  try {
    // Obtener detalles del pedido
    order = await getOrderByCode(orderCode, restaurantId);
  } catch (err) {
    console.error('Error al obtener pedido:', err);
    error = 'No se pudo cargar el pedido';
  }
}
---

<Layout 
  title={order ? `Pedido #${order.orderCode}` : 'Estado del Pedido'}
>
  <div class="min-h-screen bg-gray-900 py-8">
    <div class="max-w-2xl mx-auto px-4">
      
      {error && (
        <!-- Estado de Error -->
        <div class="bg-gray-800 rounded-2xl shadow-xl p-8 text-center">
          <svg class="w-16 h-16 text-red-500 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.996-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z" />
          </svg>
          <h1 class="text-2xl font-bold text-white mb-2">Error</h1>
          <p class="text-gray-400 mb-6">{error}</p>
          <button 
            onclick="history.back()" 
            class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-6 rounded-lg transition-colors"
          >
            Volver
          </button>
        </div>
      )}

      {order && (
        <!-- Comprobante del Pedido -->
        <div class="bg-white rounded-2xl shadow-xl overflow-hidden">
          
          <!-- Header -->
          <div class="bg-gradient-to-r from-green-600 to-green-700 px-8 py-6 text-white">
            <div class="text-center">
              <div class="w-16 h-16 bg-white bg-opacity-20 rounded-full flex items-center justify-center mx-auto mb-3">
                <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <h1 class="text-3xl font-bold mb-1">¬°Pedido Realizado!</h1>
              <p class="text-green-100">Tu pedido ha sido creado exitosamente</p>
            </div>
          </div>

          <!-- C√≥digo del Pedido -->
          <div class="px-8 py-6 bg-gray-50 border-b border-gray-200">
            <div class="text-center">
              <p class="text-sm font-medium text-gray-600 mb-2">N√∫mero de Pedido</p>
              <div class="inline-flex items-center bg-gray-900 text-white px-6 py-3 rounded-xl">
                <span class="text-3xl font-bold tracking-wider">#{order.orderCode}</span>
              </div>
              <p class="text-sm text-gray-500 mt-3">
                Muestra este c√≥digo al personal para realizar el pago
              </p>
            </div>
          </div>

          <!-- Estado del Pedido -->
          <div class="px-8 py-6 border-b border-gray-200">
            <div class="flex items-center justify-between">
              <div>
                <h3 class="text-lg font-semibold text-gray-900 mb-1">Estado del Pedido</h3>
                <p class="text-sm text-gray-600">
                  Creado el {new Date(order.createdAt).toLocaleDateString('es-ES', { 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                  })}
                </p>
              </div>
              <div class="text-right">
                <span class={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
                  order.status === 'AwaitingPayment' 
                    ? 'bg-yellow-100 text-yellow-800'
                    : order.status === 'Pending'
                    ? 'bg-blue-100 text-blue-800'
                    : order.status === 'InPreparation'
                    ? 'bg-orange-100 text-orange-800'
                    : order.status === 'Ready'
                    ? 'bg-green-100 text-green-800'
                    : 'bg-gray-100 text-gray-800'
                }`}>
                  {order.status === 'AwaitingPayment' && 'üí∞ Esperando Pago'}
                  {order.status === 'Pending' && '‚è≥ Pendiente'}
                  {order.status === 'InPreparation' && 'üë®‚Äçüç≥ En Preparaci√≥n'}
                  {order.status === 'Ready' && '‚úÖ Listo'}
                  {!['AwaitingPayment', 'Pending', 'InPreparation', 'Ready'].includes(order.status) && order.status}
                </span>
              </div>
            </div>
          </div>

          <!-- Detalles del Pedido -->
          <div class="px-8 py-6 border-b border-gray-200">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Detalles del Pedido</h3>
            <div class="space-y-3">
              {order.items?.map((item: any) => (
                <div class="flex justify-between items-center">
                  <div class="flex-1">
                    <p class="font-medium text-gray-900">{item.name}</p>
                    <p class="text-sm text-gray-600">
                      {item.quantity} √ó ${item.unitPrice?.toFixed(2)}
                    </p>
                  </div>
                  <p class="font-medium text-gray-900">
                    ${(item.quantity * item.unitPrice).toFixed(2)}
                  </p>
                </div>
              ))}
            </div>
          </div>

          <!-- Total -->
          <div class="px-8 py-6 bg-gray-50">
            <div class="flex justify-between items-center">
              <p class="text-lg font-semibold text-gray-900">Total a Pagar</p>
              <p class="text-2xl font-bold text-green-600">${order.total?.toFixed(2)}</p>
            </div>
          </div>

          <!-- Instrucciones -->
          <div class="px-8 py-6">
            <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <div class="flex items-start space-x-3">
                <svg class="w-6 h-6 text-blue-500 flex-shrink-0 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <div class="text-sm">
                  <p class="font-medium text-blue-900 mb-1">Instrucciones para el Pago</p>
                  <ul class="text-blue-800 space-y-1 list-disc list-inside">
                    <li>Muestra el c√≥digo <strong>#{order.orderCode}</strong> al personal del restaurante</li>
                    <li>Realiza el pago del total mostrado</li>
                    <li>Una vez confirmado el pago, tu pedido pasar√° a la cocina</li>
                    <li>Te notificaremos cuando est√© listo para recoger</li>
                  </ul>
                </div>
              </div>
            </div>
          </div>

          <!-- Botones de Acci√≥n -->
          <div class="px-8 py-6 bg-gray-50 flex space-x-3">
            <button
              onclick="window.print()"
              class="flex-1 bg-gray-600 hover:bg-gray-700 text-white font-medium py-3 px-4 rounded-lg transition-colors flex items-center justify-center space-x-2"
            >
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z" />
              </svg>
              <span>Imprimir</span>
            </button>
            
            <button
              onclick="location.reload()"
              class="flex-1 bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-4 rounded-lg transition-colors flex items-center justify-center space-x-2"
            >
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
              </svg>
              <span>Actualizar Estado</span>
            </button>
          </div>

        </div>
      )}
      
    </div>
  </div>

  <!-- Actualizaci√≥n autom√°tica cada 30 segundos -->
  <script>
    // Auto-refresh para ver cambios de estado
    if (document.querySelector('[data-auto-refresh]')) {
      setInterval(() => {
        location.reload();
      }, 30000);
    }
  </script>

  <style>
    /* Estilos para impresi√≥n */
    @media print {
      body * {
        visibility: hidden;
      }
      .bg-gray-900 {
        background: white !important;
      }
      .bg-white, .bg-gray-50 {
        background: white !important;
      }
      .text-white {
        color: black !important;
      }
      .print-section, .print-section * {
        visibility: visible;
      }
      .print-section {
        position: absolute;
        left: 0;
        top: 0;
        width: 100%;
      }
    }
  </style>
</Layout>
